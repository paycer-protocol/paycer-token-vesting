{
  "language": "Solidity",
  "sources": {
    "contracts/Keeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\n// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and\n// ./interfaces/KeeperCompatibleInterface.sol\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\nimport \"./Vesting.sol\";\n\ncontract Keeper is KeeperCompatibleInterface {\n    /**\n    * Public counter variable\n    */\n    uint public counter;\n\n    /**\n    * Use an interval in seconds and a timestamp to slow execution of Upkeep\n    */\n    uint public immutable interval;\n    uint public lastTimeStamp;\n    Vesting public vesting;\n\n    constructor(uint updateInterval, Vesting _vesting) public {\n      interval = updateInterval;\n      lastTimeStamp = block.timestamp;\n      vesting = _vesting;\n\n      counter = 0;\n    }\n\n    function checkUpkeep(bytes calldata /* checkData */) external override returns (bool upkeepNeeded, bytes memory /* performData */) {\n        //upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\n\n        uint256 totalAmountFree = 0;\n        uint256 totalAmountWithdrawn = 0;\n        uint numParticipants = vesting.participantCount();\n        for(uint i = 0; i < numParticipants; ++i) {\n            address participant = vesting.getParticipants(i, 1)[0];\n            totalAmountFree += vesting.vested(participant);\n            (uint256 u0, uint256 u1) = vesting.recipients(participant);\n            totalAmountWithdrawn += u1;\n            //totalAmountWithdrawn += vesting.recipients(participant);\n        }\n\n        // something is wrong!\n        upkeepNeeded = totalAmountWithdrawn > totalAmountFree || totalAmountFree > vesting.totalVestingAmount();\n    }\n\n    function performUpkeep(bytes calldata /* performData */) external override {\n        lastTimeStamp = block.timestamp;\n        counter = counter + 1;\n        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function\n\n        //vesting.lock();\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "contracts/Vesting.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.3;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./libraries/AddressPagination.sol\";\n\n/// @title Paycer Vesting Contract\n/// @notice You can use this contract for token vesting\n/// @dev All function calls are currently implemented without side effects\ncontract Vesting is Initializable, OwnableUpgradeable {\n    using AddressPagination for address[];\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct VestingParams {\n        // Name of this tokenomics\n        string vestingName;\n        // Total amount to be vested\n        uint256 amountToBeVested;\n        // Period before release vesting starts, also it unlocks initialUnlock vesting tokens. (in time unit of block.timestamp)\n        uint256 lockPeriod;\n        // Percent of tokens initially unlocked\n        uint256 initialUnlock;\n        // Period to release all vesting token, after lockPeriod + vestingPeriod it releases 100% of vesting tokens. (in time unit of block.timestamp)\n        uint256 vestingPeriod;\n        // Amount of time in seconds between withdrawal periods.\n        uint256 releaseInterval;\n        // Release percent in each withdrawing interval\n        uint256 releaseRate;\n    }\n\n    struct VestingInfo {\n        // Total amount of tokens to be vested.\n        uint256 totalAmount;\n        // The amount that has been withdrawn.\n        uint256 amountWithdrawn;\n    }\n\n    /// @notice General decimal values ACCURACY unless specified differently (e.g. fees, exchange rates)\n    uint256 public constant ACCURACY = 1e10;\n\n    /*************************** Vesting Params *************************/\n\n    /// @notice Total balance of this vesting contract\n    uint256 public amountToBeVested;\n\n    /// @notice Name of this vesting\n    string public vestingName;\n\n    /// @notice Start time of vesting\n    uint256 public startTime;\n\n    /// @notice Intervals that the release happens. Every interval, releaseRate of tokens are released.\n    uint256 public releaseInterval;\n\n    /// @notice Release percent in each withdrawing interval\n    uint256 public releaseRate;\n\n    /// @notice Percent of tokens initially unlocked\n    uint256 public initialUnlock;\n\n    /// @notice Period before release vesting starts, also it unlocks initialUnlock vesting tokens. (in time unit of block.timestamp)\n    uint256 public lockPeriod;\n\n    /// @notice Period to release all vesting token, after lockPeriod + vestingPeriod it releases 100% of vesting tokens. (in time unit of block.timestamp)\n    uint256 public vestingPeriod;\n\n    /// @notice Vesting token of the project.\n    address public vestingToken;\n\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private enteredStatus;\n\n    /*************************** Status Info *************************/\n\n    /// @notice Sum of all user's vesting amount\n    uint256 public totalVestingAmount;\n\n    /// @notice Vesting schedule info for each user(presale)\n    mapping(address => VestingInfo) public recipients;\n\n    // Participants list\n    address[] internal participants;\n    mapping(address => uint256) internal indexOf;\n    mapping(address => bool) internal inserted;\n\n    /// @notice An event emitted when the vesting schedule is updated.\n    event VestingInfoUpdated(address indexed registeredAddress, uint256 totalAmount);\n\n    /// @notice An event emitted when withdraw happens\n    event Withdraw(address indexed registeredAddress, uint256 amountWithdrawn);\n\n    /// @notice An event emitted when startTime is set\n    event StartTimeSet(uint256 startTime);\n\n    /// @notice An event emitted when owner is updated\n    event OwnerUpdated(address indexed newOwner);\n\n    function initialize(address _vestingToken, VestingParams memory _params) external initializer {\n        require(_vestingToken != address(0), \"initialize: vestingToken cannot be zero\");\n        require(_params.releaseRate > 0, \"initialize: release rate cannot be zero\");\n        require(_params.releaseInterval > 0, \"initialize: release interval cannot be zero\");\n\n        __Ownable_init();\n\n        vestingToken = _vestingToken;\n\n        vestingName = _params.vestingName;\n        amountToBeVested = _params.amountToBeVested;\n        initialUnlock = _params.initialUnlock;\n        releaseInterval = _params.releaseInterval;\n        releaseRate = _params.releaseRate;\n        lockPeriod = _params.lockPeriod;\n        vestingPeriod = _params.vestingPeriod;\n        enteredStatus = NOT_ENTERED;\n    }\n\n    /**\n     * @notice Return the number of participants\n     */\n    function participantCount() external view returns (uint256) {\n        return participants.length;\n    }\n\n    /**\n     * @notice Return the list of participants\n     */\n    function getParticipants(uint256 page, uint256 limit)\n        external\n        view\n        returns (address[] memory)\n    {\n        return participants.paginate(page, limit);\n    }\n\n    /**\n     * @notice Update user vesting information\n     * @dev This is called by presale contract\n     * @param recp Address of Recipient\n     * @param amount Amount of vesting token\n     */\n    function updateRecipient(address recp, uint256 amount) external onlyOwner {\n        require(\n            startTime == 0 || startTime >= block.timestamp,\n            \"updateRecipient: Cannot update the receipient after started\"\n        );\n        require(amount > 0, \"updateRecipient: Cannot vest 0\");\n\n        // remove previous amount and add new amount\n        totalVestingAmount = totalVestingAmount + amount - recipients[recp].totalAmount;\n\n        uint256 depositedAmount = IERC20Upgradeable(vestingToken).balanceOf(address(this));\n        require(\n            depositedAmount >= totalVestingAmount,\n            \"updateRecipient: Vesting amount exceeds current balance\"\n        );\n\n        if (inserted[recp] == false) {\n            inserted[recp] = true;\n            indexOf[recp] = participants.length;\n            participants.push(recp);\n        }\n\n        recipients[recp].totalAmount = amount;\n\n        emit VestingInfoUpdated(recp, amount);\n    }\n\n    /**\n     * @notice Set vesting start time\n     * @dev This should be called before vesting starts\n     * @param newStartTime New start time\n     */\n    function setStartTime(uint256 newStartTime) external onlyOwner {\n        require(newStartTime > block.timestamp, \"setStartTime: Should be time in future\");\n\n        startTime = newStartTime;\n\n        emit StartTimeSet(newStartTime);\n    }\n\n    /**\n     * @notice Withdraw tokens when vesting is ended\n     * @dev Anyone can claim their tokens\n     */\n    function withdraw() external nonReentrant {\n        VestingInfo storage vestingInfo = recipients[msg.sender];\n        if (vestingInfo.totalAmount == 0) return;\n\n        uint256 _vested = vested(msg.sender);\n        uint256 _withdrawable = withdrawable(msg.sender);\n        vestingInfo.amountWithdrawn = _vested;\n\n        require(_withdrawable > 0, \"Nothing to withdraw\");\n        IERC20Upgradeable(vestingToken).safeTransfer(msg.sender, _withdrawable);\n        emit Withdraw(msg.sender, _withdrawable);\n    }\n\n    /**\n     * @notice Returns the amount of vested vesting tokens\n     * @dev Calculates available amount depending on vesting params\n     * @param beneficiary address of the beneficiary\n     * @return amount : Amount of vested tokens\n     */\n    function vested(address beneficiary) public view virtual returns (uint256 amount) {\n        uint256 lockEndTime = startTime + lockPeriod;\n        uint256 vestingEndTime = lockEndTime + vestingPeriod;\n        VestingInfo memory vestingInfo = recipients[beneficiary];\n\n        if (startTime == 0 || vestingInfo.totalAmount == 0 || block.timestamp <= lockEndTime) {\n            return 0;\n        }\n\n        if (block.timestamp > vestingEndTime) {\n            return vestingInfo.totalAmount;\n        }\n\n        uint256 initialUnlockAmount = (vestingInfo.totalAmount * initialUnlock) / ACCURACY;\n        uint256 unlockAmountPerInterval = (vestingInfo.totalAmount * releaseRate) / ACCURACY;\n        uint256 vestedAmount = (block.timestamp - lockEndTime) / releaseInterval * unlockAmountPerInterval +\n            initialUnlockAmount;\n\n        uint256 withdrawnAmount = recipients[beneficiary].amountWithdrawn;\n        vestedAmount = withdrawnAmount > vestedAmount ? withdrawnAmount : vestedAmount;\n\n        return vestedAmount > vestingInfo.totalAmount ? vestingInfo.totalAmount : vestedAmount;\n    }\n\n    /**\n     * @notice Return locked amount\n     * @return Locked vesting token amount\n     */\n    function locked(address beneficiary) public view returns (uint256) {\n        uint256 totalAmount = recipients[beneficiary].totalAmount;\n        uint256 vestedAmount = vested(beneficiary);\n        return totalAmount - vestedAmount;\n    }\n\n    /**\n     * @notice Return remaining withdrawable amount\n     * @return Remaining vested amount of vesting token\n     */\n    function withdrawable(address beneficiary) public view returns (uint256) {\n        uint256 vestedAmount = vested(beneficiary);\n        uint256 withdrawnAmount = recipients[beneficiary].amountWithdrawn;\n        return vestedAmount - withdrawnAmount;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(enteredStatus != ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        enteredStatus = ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        enteredStatus = NOT_ENTERED;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    require(tx.origin == address(0));\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easilly be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/libraries/AddressPagination.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nlibrary AddressPagination {\n    function paginate(\n        address[] memory array,\n        uint256 page,\n        uint256 limit\n    ) internal pure returns (address[] memory result) {\n        result = new address[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            if (page * limit + i >= array.length) {\n                result[i] = address(0);\n            } else {\n                result[i] = array[page * limit + i];\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
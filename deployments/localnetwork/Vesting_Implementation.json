{
  "address": "0x5658Ade82c964Ebc477075bb9e5115Ea00137f09",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "StartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registeredAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "VestingInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registeredAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCURACY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountToBeVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialUnlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vestingName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amountToBeVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialUnlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseInterval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vesting.VestingParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "participantCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStartTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVestingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "vested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25b6e71f766778d970ec084bb6ee82b0caa9b8da4c43d5ea2a8297069ec771d6",
  "receipt": {
    "to": null,
    "from": "0x51D484Fe4e287dd972400e7516Cd87df2c9BFe18",
    "contractAddress": "0x5658Ade82c964Ebc477075bb9e5115Ea00137f09",
    "transactionIndex": 0,
    "gasUsed": "1361201",
    "logsBloom": "0x
    "blockHash": "0xb32e9654a58aef7436478f0aa59a606b1e1f04ceee6470ae6fbcccddfc28bddc",
    "transactionHash": "0x25b6e71f766778d970ec084bb6ee82b0caa9b8da4c43d5ea2a8297069ec771d6",
    "logs": [],
    "blockNumber": 15392112,
    "cumulativeGasUsed": "1361201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "09a8b28e76600eb28b171da541e341c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"VestingInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToBeVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vestingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountToBeVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participantCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"locked(address)\":{\"returns\":{\"_0\":\"Locked vesting token amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStartTime(uint256)\":{\"details\":\"This should be called before vesting starts\",\"params\":{\"newStartTime\":\"New start time\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRecipient(address,uint256)\":{\"details\":\"This is called by presale contract\",\"params\":{\"amount\":\"Amount of vesting token\",\"recp\":\"Address of Recipient\"}},\"vested(address)\":{\"details\":\"Calculates available amount depending on vesting params\",\"params\":{\"beneficiary\":\"address of the beneficiary\"},\"returns\":{\"amount\":\": Amount of vested tokens\"}},\"withdraw()\":{\"details\":\"Anyone can claim their tokens Warning: Take care of re-entrancy attack here. Vesting tokens are from not our own, which means re-entrancy can happen when the transfer happens. For now, we do checks-effects-interactions, but for absolute safety, we may use reentracny guard.\"},\"withdrawable(address)\":{\"returns\":{\"_0\":\"Remaining vested amount of vesting token\"}}},\"title\":\"Paycer Vesting Contract\",\"version\":1},\"userdoc\":{\"events\":{\"OwnerUpdated(address)\":{\"notice\":\"An event emitted when owner is updated\"},\"StartTimeSet(uint256)\":{\"notice\":\"An event emitted when startTime is set\"},\"VestingInfoUpdated(address,uint256)\":{\"notice\":\"An event emitted when the vesting schedule is updated.\"},\"Withdraw(address,uint256)\":{\"notice\":\"An event emitted when withdraw happens\"}},\"kind\":\"user\",\"methods\":{\"ACCURACY()\":{\"notice\":\"General decimal values ACCURACY unless specified differently (e.g. fees, exchange rates)\"},\"amountToBeVested()\":{\"notice\":\"Total balance of this vesting contract\"},\"getParticipants(uint256,uint256)\":{\"notice\":\"Return the list of participants\"},\"initialUnlock()\":{\"notice\":\"Percent of tokens initially unlocked\"},\"lockPeriod()\":{\"notice\":\"Period before release vesting starts, also it unlocks initialUnlock vesting tokens. (in time unit of block.timestamp)\"},\"locked(address)\":{\"notice\":\"Return locked amount\"},\"participantCount()\":{\"notice\":\"Return the number of participants\"},\"recipients(address)\":{\"notice\":\"Vesting schedule info for each user(presale)\"},\"releaseInterval()\":{\"notice\":\"Intervals that the release happens. Every interval, releaseRate of tokens are released.\"},\"releaseRate()\":{\"notice\":\"Release percent in each withdrawing interval\"},\"setStartTime(uint256)\":{\"notice\":\"Set vesting start time\"},\"startTime()\":{\"notice\":\"Start time of vesting\"},\"totalVestingAmount()\":{\"notice\":\"Sum of all user's vesting amount\"},\"updateRecipient(address,uint256)\":{\"notice\":\"Update user vesting information\"},\"vested(address)\":{\"notice\":\"Returns the amount of vested vesting tokens\"},\"vestingName()\":{\"notice\":\"Name of this vesting\"},\"vestingPeriod()\":{\"notice\":\"Period to release all vesting token, after lockPeriod + vestingPeriod it releases 100% of vesting tokens. (in time unit of block.timestamp)\"},\"vestingToken()\":{\"notice\":\"Vesting token of the project.\"},\"withdraw()\":{\"notice\":\"Withdraw tokens when vesting is ended\"},\"withdrawable(address)\":{\"notice\":\"Return remaining withdrawable amount\"}},\"notice\":\"You can use this contract for token vesting\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.3;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./libraries/AddressPagination.sol\\\";\\n\\n/// @title Paycer Vesting Contract\\n/// @notice You can use this contract for token vesting\\n/// @dev All function calls are currently implemented without side effects\\ncontract Vesting is Initializable, OwnableUpgradeable {\\n    using AddressPagination for address[];\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct VestingParams {\\n        // Name of this tokenomics\\n        string vestingName;\\n        // Total amount to be vested\\n        uint256 amountToBeVested;\\n        // Period before release vesting starts, also it unlocks initialUnlock vesting tokens. (in time unit of block.timestamp)\\n        uint256 lockPeriod;\\n        // Percent of tokens initially unlocked\\n        uint256 initialUnlock;\\n        // Period to release all vesting token, after lockPeriod + vestingPeriod it releases 100% of vesting tokens. (in time unit of block.timestamp)\\n        uint256 vestingPeriod;\\n        // Amount of time in seconds between withdrawal periods.\\n        uint256 releaseInterval;\\n        // Release percent in each withdrawing interval\\n        uint256 releaseRate;\\n    }\\n\\n    struct VestingInfo {\\n        // Total amount of tokens to be vested.\\n        uint256 totalAmount;\\n        // The amount that has been withdrawn.\\n        uint256 amountWithdrawn;\\n    }\\n\\n    /// @notice General decimal values ACCURACY unless specified differently (e.g. fees, exchange rates)\\n    uint256 public constant ACCURACY = 1e10;\\n\\n    /*************************** Vesting Params *************************/\\n\\n    /// @notice Total balance of this vesting contract\\n    uint256 public amountToBeVested;\\n\\n    /// @notice Name of this vesting\\n    string public vestingName;\\n\\n    /// @notice Start time of vesting\\n    uint256 public startTime;\\n\\n    /// @notice Intervals that the release happens. Every interval, releaseRate of tokens are released.\\n    uint256 public releaseInterval;\\n\\n    /// @notice Release percent in each withdrawing interval\\n    uint256 public releaseRate;\\n\\n    /// @notice Percent of tokens initially unlocked\\n    uint256 public initialUnlock;\\n\\n    /// @notice Period before release vesting starts, also it unlocks initialUnlock vesting tokens. (in time unit of block.timestamp)\\n    uint256 public lockPeriod;\\n\\n    /// @notice Period to release all vesting token, after lockPeriod + vestingPeriod it releases 100% of vesting tokens. (in time unit of block.timestamp)\\n    uint256 public vestingPeriod;\\n\\n    /// @notice Vesting token of the project.\\n    address public vestingToken;\\n\\n    /*************************** Status Info *************************/\\n\\n    /// @notice Sum of all user's vesting amount\\n    uint256 public totalVestingAmount;\\n\\n    /// @notice Vesting schedule info for each user(presale)\\n    mapping(address => VestingInfo) public recipients;\\n\\n    // Participants list\\n    address[] internal participants;\\n    mapping(address => uint256) internal indexOf;\\n    mapping(address => bool) internal inserted;\\n\\n    /// @notice An event emitted when the vesting schedule is updated.\\n    event VestingInfoUpdated(address indexed registeredAddress, uint256 totalAmount);\\n\\n    /// @notice An event emitted when withdraw happens\\n    event Withdraw(address indexed registeredAddress, uint256 amountWithdrawn);\\n\\n    /// @notice An event emitted when startTime is set\\n    event StartTimeSet(uint256 startTime);\\n\\n    /// @notice An event emitted when owner is updated\\n    event OwnerUpdated(address indexed newOwner);\\n\\n    function initialize(address _vestingToken, VestingParams memory _params) external initializer {\\n        require(_vestingToken != address(0), \\\"initialize: vestingToken cannot be zero\\\");\\n        require(_params.releaseRate > 0, \\\"initialize: release rate cannot be zero\\\");\\n        require(_params.releaseInterval > 0, \\\"initialize: release interval cannot be zero\\\");\\n\\n        __Ownable_init();\\n\\n        vestingToken = _vestingToken;\\n\\n        vestingName = _params.vestingName;\\n        amountToBeVested = _params.amountToBeVested;\\n        initialUnlock = _params.initialUnlock;\\n        releaseInterval = _params.releaseInterval;\\n        releaseRate = _params.releaseRate;\\n        lockPeriod = _params.lockPeriod;\\n        vestingPeriod = _params.vestingPeriod;\\n    }\\n\\n    /**\\n     * @notice Return the number of participants\\n     */\\n    function participantCount() external view returns (uint256) {\\n        return participants.length;\\n    }\\n\\n    /**\\n     * @notice Return the list of participants\\n     */\\n    function getParticipants(uint256 page, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return participants.paginate(page, limit);\\n    }\\n\\n    /**\\n     * @notice Update user vesting information\\n     * @dev This is called by presale contract\\n     * @param recp Address of Recipient\\n     * @param amount Amount of vesting token\\n     */\\n    function updateRecipient(address recp, uint256 amount) external onlyOwner {\\n        require(\\n            startTime == 0 || startTime >= block.timestamp,\\n            \\\"updateRecipient: Cannot update the receipient after started\\\"\\n        );\\n        require(amount > 0, \\\"updateRecipient: Cannot vest 0\\\");\\n\\n        // remove previous amount and add new amount\\n        totalVestingAmount = totalVestingAmount + amount - recipients[recp].totalAmount;\\n\\n        uint256 depositedAmount = IERC20Upgradeable(vestingToken).balanceOf(address(this));\\n        require(\\n            depositedAmount >= totalVestingAmount,\\n            \\\"updateRecipient: Vesting amount exceeds current balance\\\"\\n        );\\n\\n        if (inserted[recp] == false) {\\n            inserted[recp] = true;\\n            indexOf[recp] = participants.length;\\n            participants.push(recp);\\n        }\\n\\n        recipients[recp].totalAmount = amount;\\n\\n        emit VestingInfoUpdated(recp, amount);\\n    }\\n\\n    /**\\n     * @notice Set vesting start time\\n     * @dev This should be called before vesting starts\\n     * @param newStartTime New start time\\n     */\\n    function setStartTime(uint256 newStartTime) external onlyOwner {\\n        // Only allow to change start time before the counting starts\\n        require(startTime == 0 || startTime >= block.timestamp, \\\"setStartTime: Already started\\\");\\n        require(newStartTime > block.timestamp, \\\"setStartTime: Should be time in future\\\");\\n\\n        startTime = newStartTime;\\n\\n        emit StartTimeSet(newStartTime);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens when vesting is ended\\n     * @dev Anyone can claim their tokens\\n     * Warning: Take care of re-entrancy attack here.\\n     * Vesting tokens are from not our own, which means\\n     * re-entrancy can happen when the transfer happens.\\n     * For now, we do checks-effects-interactions, but\\n     * for absolute safety, we may use reentracny guard.\\n     */\\n    function withdraw() external {\\n        VestingInfo storage vestingInfo = recipients[msg.sender];\\n        if (vestingInfo.totalAmount == 0) return;\\n\\n        uint256 _vested = vested(msg.sender);\\n        uint256 _withdrawable = withdrawable(msg.sender);\\n        vestingInfo.amountWithdrawn = _vested;\\n\\n        require(_withdrawable > 0, \\\"Nothing to withdraw\\\");\\n        IERC20Upgradeable(vestingToken).safeTransfer(msg.sender, _withdrawable);\\n        emit Withdraw(msg.sender, _withdrawable);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of vested vesting tokens\\n     * @dev Calculates available amount depending on vesting params\\n     * @param beneficiary address of the beneficiary\\n     * @return amount : Amount of vested tokens\\n     */\\n    function vested(address beneficiary) public view virtual returns (uint256 amount) {\\n        uint256 lockEndTime = startTime + lockPeriod;\\n        uint256 vestingEndTime = lockEndTime + vestingPeriod;\\n        VestingInfo memory vestingInfo = recipients[beneficiary];\\n\\n        if (startTime == 0 || vestingInfo.totalAmount == 0 || block.timestamp <= lockEndTime) {\\n            return 0;\\n        }\\n\\n        if (block.timestamp > vestingEndTime) {\\n            return vestingInfo.totalAmount;\\n        }\\n\\n        uint256 initialUnlockAmount = (vestingInfo.totalAmount * initialUnlock) / ACCURACY;\\n        uint256 unlockAmountPerInterval = (vestingInfo.totalAmount * releaseRate) / ACCURACY;\\n        uint256 vestedAmount = (block.timestamp - lockEndTime) / releaseInterval * unlockAmountPerInterval +\\n            initialUnlockAmount;\\n\\n        uint256 withdrawnAmount = recipients[beneficiary].amountWithdrawn;\\n        vestedAmount = withdrawnAmount > vestedAmount ? withdrawnAmount : vestedAmount;\\n\\n        return vestedAmount > vestingInfo.totalAmount ? vestingInfo.totalAmount : vestedAmount;\\n    }\\n\\n    /**\\n     * @notice Return locked amount\\n     * @return Locked vesting token amount\\n     */\\n    function locked(address beneficiary) public view returns (uint256) {\\n        uint256 totalAmount = recipients[beneficiary].totalAmount;\\n        uint256 vestedAmount = vested(beneficiary);\\n        return totalAmount - vestedAmount;\\n    }\\n\\n    /**\\n     * @notice Return remaining withdrawable amount\\n     * @return Remaining vested amount of vesting token\\n     */\\n    function withdrawable(address beneficiary) public view returns (uint256) {\\n        uint256 vestedAmount = vested(beneficiary);\\n        uint256 withdrawnAmount = recipients[beneficiary].amountWithdrawn;\\n        return vestedAmount - withdrawnAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x80a037b69c968e1fbfe8d30c54b4b7fe60b87d0b59e04621ba313cfdca319907\",\"license\":\"UNLICENSED\"},\"contracts/libraries/AddressPagination.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nlibrary AddressPagination {\\n    function paginate(\\n        address[] memory array,\\n        uint256 page,\\n        uint256 limit\\n    ) internal pure returns (address[] memory result) {\\n        result = new address[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            if (page * limit + i >= array.length) {\\n                result[i] = address(0);\\n            } else {\\n                result[i] = array[page * limit + i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd48ed487200226ede243f509279ecd4b75ff3e42f84d52e698db47e2dc05c3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806378e97925116100c3578063ce513b6f1161007c578063ce513b6f1461026d578063d1a82b0414610280578063ded0ed1614610295578063eb820312146102b5578063f2fde38b146102f1578063fbcd9b051461030457610158565b806378e979251461022557806388f4d4091461022e5780638da5cb5b14610237578063a703299814610248578063c3f368af14610251578063cbf9fe5f1461025a57610158565b80633e0a322d116101155780633e0a322d146101d25780633fd8b02f146101e55780635e0014fc146101ee5780637102b72814610201578063715018a6146102145780637313ee5a1461021c57610158565b80630efaa4de1461015d57806319d152fa146101725780631f8db268146101a25780632db94d19146101b9578063362f04c0146101c25780633ccfd60b146101ca575b600080fd5b61017061016b36600461146b565b610310565b005b606d54610185906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ab60685481565b604051908152602001610199565b6101ab606e5481565b6070546101ab565b61017061062d565b6101706101e03660046114b4565b6106f7565b6101ab606b5481565b6101706101fc3660046113b1565b610817565b6101ab61020f366004611397565b610a6e565b610170610bd2565b6101ab606c5481565b6101ab60675481565b6101ab60655481565b6033546001600160a01b0316610185565b6101ab60695481565b6101ab606a5481565b6101ab610268366004611397565b610c06565b6101ab61027b366004611397565b610c3d565b610288610c72565b604051610199919061156e565b6102a86102a33660046114e4565b610d00565b6040516101999190611521565b6102dc6102c3366004611397565b606f602052600090815260409020805460019091015482565b60408051928352602083019190915201610199565b6101706102ff366004611397565b610d78565b6101ab6402540be40081565b6033546001600160a01b031633146103435760405162461bcd60e51b815260040161033a906115a1565b60405180910390fd5b606754158061035457504260675410155b6103c65760405162461bcd60e51b815260206004820152603b60248201527f757064617465526563697069656e743a2043616e6e6f7420757064617465207460448201527f68652072656365697069656e7420616674657220737461727465640000000000606482015260840161033a565b600081116104165760405162461bcd60e51b815260206004820152601e60248201527f757064617465526563697069656e743a2043616e6e6f74207665737420300000604482015260640161033a565b6001600160a01b0382166000908152606f6020526040902054606e5461043d908390611652565b61044791906116a9565b606e55606d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c691906114cc565b9050606e548110156105405760405162461bcd60e51b815260206004820152603760248201527f757064617465526563697069656e743a2056657374696e6720616d6f756e742060448201527f657863656564732063757272656e742062616c616e6365000000000000000000606482015260840161033a565b6001600160a01b03831660009081526072602052604090205460ff166105d3576001600160a01b0383166000818152607260209081526040808320805460ff19166001908117909155607080546071909452918420839055820181559091527f8f6b23ffa15f0465e3176e15ca644cf24f86dc1312fe715484e3c4aead5eb78b0180546001600160a01b03191690911790555b6001600160a01b0383166000818152606f602052604090819020849055517fb75e30dd4130df7c81c959903fd87c9797b4437f75b2d292531f1cd5c22b49a5906106209085815260200190565b60405180910390a2505050565b336000908152606f60205260409020805461064857506106f5565b600061065333610a6e565b9050600061066033610c3d565b600184018390559050806106ac5760405162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015260640161033a565b606d546106c3906001600160a01b03163383610e13565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436490602001610620565b565b6033546001600160a01b031633146107215760405162461bcd60e51b815260040161033a906115a1565b606754158061073257504260675410155b61077e5760405162461bcd60e51b815260206004820152601d60248201527f736574537461727454696d653a20416c72656164792073746172746564000000604482015260640161033a565b4281116107dc5760405162461bcd60e51b815260206004820152602660248201527f736574537461727454696d653a2053686f756c642062652074696d6520696e2060448201526566757475726560d01b606482015260840161033a565b60678190556040518181527faad53c4362ef2fe5a5390cc046e71fd8423a0a8dceebc156ac9bbcd15997eec29060200160405180910390a150565b600054610100900460ff166108325760005460ff1615610836565b303b155b6108995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161033a565b600054610100900460ff161580156108bb576000805461ffff19166101011790555b6001600160a01b0383166109215760405162461bcd60e51b815260206004820152602760248201527f696e697469616c697a653a2076657374696e67546f6b656e2063616e6e6f74206044820152666265207a65726f60c81b606482015260840161033a565b60008260c00151116109855760405162461bcd60e51b815260206004820152602760248201527f696e697469616c697a653a2072656c6561736520726174652063616e6e6f74206044820152666265207a65726f60c81b606482015260840161033a565b60008260a00151116109ed5760405162461bcd60e51b815260206004820152602b60248201527f696e697469616c697a653a2072656c6561736520696e74657276616c2063616e60448201526a6e6f74206265207a65726f60a81b606482015260840161033a565b6109f5610e65565b606d80546001600160a01b0319166001600160a01b03851617905581518051610a269160669160209091019061127c565b5060208201516065556060820151606a5560a082015160685560c08201516069556040820151606b556080820151606c558015610a69576000805461ff00191690555b505050565b600080606b54606754610a819190611652565b90506000606c5482610a939190611652565b6001600160a01b0385166000908152606f60209081526040918290208251808401909352805483526001015490820152606754919250901580610ad557508051155b80610ae05750824211155b15610af15760009350505050610bcd565b81421115610b0457519250610bcd915050565b60006402540be400606a548360000151610b1e919061168a565b610b28919061166a565b905060006402540be4006069548460000151610b44919061168a565b610b4e919061166a565b9050600082826068548842610b6391906116a9565b610b6d919061166a565b610b77919061168a565b610b819190611652565b6001600160a01b0389166000908152606f6020526040902060010154909150818111610bad5781610baf565b805b85519092508211610bc05781610bc3565b84515b9750505050505050505b919050565b6033546001600160a01b03163314610bfc5760405162461bcd60e51b815260040161033a906115a1565b6106f56000610e9c565b6001600160a01b0381166000908152606f602052604081205481610c2984610a6e565b9050610c3581836116a9565b949350505050565b600080610c4983610a6e565b6001600160a01b0384166000908152606f6020526040902060010154909150610c3581836116a9565b60668054610c7f906116f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cab906116f0565b8015610cf85780601f10610ccd57610100808354040283529160200191610cf8565b820191906000526020600020905b815481529060010190602001808311610cdb57829003601f168201915b505050505081565b6060610d7183836070805480602002602001604051908101604052809291908181526020018280548015610d5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d3f575b5050505050610eee9092919063ffffffff16565b9392505050565b6033546001600160a01b03163314610da25760405162461bcd60e51b815260040161033a906115a1565b6001600160a01b038116610e075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161033a565b610e1081610e9c565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a69908490611048565b600054610100900460ff16610e8c5760405162461bcd60e51b815260040161033a906115d6565b610e9461111a565b6106f5611141565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60608167ffffffffffffffff811115610f1757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f40578160200160208202803683370190505b50905060005b8281101561104057845181610f5b858761168a565b610f659190611652565b10610fb1576000828281518110610f8c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061102e565b8481610fbd858761168a565b610fc79190611652565b81518110610fe557634e487b7160e01b600052603260045260246000fd5b602002602001015182828151811061100d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b806110388161172b565b915050610f46565b509392505050565b600061109d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111719092919063ffffffff16565b805190915015610a6957808060200190518101906110bb9190611494565b610a695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161033a565b600054610100900460ff166106f55760405162461bcd60e51b815260040161033a906115d6565b600054610100900460ff166111685760405162461bcd60e51b815260040161033a906115d6565b6106f533610e9c565b6060610c35848460008585843b6111ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161033a565b600080866001600160a01b031685876040516111e69190611505565b60006040518083038185875af1925050503d8060008114611223576040519150601f19603f3d011682016040523d82523d6000602084013e611228565b606091505b5091509150611238828286611243565b979650505050505050565b60608315611252575081610d71565b8251156112625782518084602001fd5b8160405162461bcd60e51b815260040161033a919061156e565b828054611288906116f0565b90600052602060002090601f0160209004810192826112aa57600085556112f0565b82601f106112c357805160ff19168380011785556112f0565b828001600101855582156112f0579182015b828111156112f05782518255916020019190600101906112d5565b506112fc929150611300565b5090565b5b808211156112fc5760008155600101611301565b80356001600160a01b0381168114610bcd57600080fd5b600082601f83011261133c578081fd5b813567ffffffffffffffff8111156113565761135661175c565b611369601f8201601f1916602001611621565b81815284602083860101111561137d578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156113a8578081fd5b610d7182611315565b600080604083850312156113c3578081fd5b6113cc83611315565b9150602083013567ffffffffffffffff808211156113e8578283fd5b9084019060e082870312156113fb578283fd5b61140560e0611621565b823582811115611413578485fd5b61141f8882860161132c565b8252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528093505050509250929050565b6000806040838503121561147d578182fd5b61148683611315565b946020939093013593505050565b6000602082840312156114a5578081fd5b81518015158114610d71578182fd5b6000602082840312156114c5578081fd5b5035919050565b6000602082840312156114dd578081fd5b5051919050565b600080604083850312156114f6578182fd5b50508035926020909101359150565b600082516115178184602087016116c0565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156115625783516001600160a01b03168352928401929184019160010161153d565b50909695505050505050565b600060208252825180602084015261158d8160408501602087016116c0565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561164a5761164a61175c565b604052919050565b6000821982111561166557611665611746565b500190565b60008261168557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156116a4576116a4611746565b500290565b6000828210156116bb576116bb611746565b500390565b60005b838110156116db5781810151838201526020016116c3565b838111156116ea576000848401525b50505050565b600181811c9082168061170457607f821691505b6020821081141561172557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561173f5761173f611746565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220523985a96d51a9b766f5318e0725929600659a082ac70d68c7def8172ad7905364736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "locked(address)": {
        "returns": {
          "_0": "Locked vesting token amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setStartTime(uint256)": {
        "details": "This should be called before vesting starts",
        "params": {
          "newStartTime": "New start time"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRecipient(address,uint256)": {
        "details": "This is called by presale contract",
        "params": {
          "amount": "Amount of vesting token",
          "recp": "Address of Recipient"
        }
      },
      "vested(address)": {
        "details": "Calculates available amount depending on vesting params",
        "params": {
          "beneficiary": "address of the beneficiary"
        },
        "returns": {
          "amount": ": Amount of vested tokens"
        }
      },
      "withdraw()": {
        "details": "Anyone can claim their tokens Warning: Take care of re-entrancy attack here. Vesting tokens are from not our own, which means re-entrancy can happen when the transfer happens. For now, we do checks-effects-interactions, but for absolute safety, we may use reentracny guard."
      },
      "withdrawable(address)": {
        "returns": {
          "_0": "Remaining vested amount of vesting token"
        }
      }
    },
    "title": "Paycer Vesting Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OwnerUpdated(address)": {
        "notice": "An event emitted when owner is updated"
      },
      "StartTimeSet(uint256)": {
        "notice": "An event emitted when startTime is set"
      },
      "VestingInfoUpdated(address,uint256)": {
        "notice": "An event emitted when the vesting schedule is updated."
      },
      "Withdraw(address,uint256)": {
        "notice": "An event emitted when withdraw happens"
      }
    },
    "kind": "user",
    "methods": {
      "ACCURACY()": {
        "notice": "General decimal values ACCURACY unless specified differently (e.g. fees, exchange rates)"
      },
      "amountToBeVested()": {
        "notice": "Total balance of this vesting contract"
      },
      "getParticipants(uint256,uint256)": {
        "notice": "Return the list of participants"
      },
      "initialUnlock()": {
        "notice": "Percent of tokens initially unlocked"
      },
      "lockPeriod()": {
        "notice": "Period before release vesting starts, also it unlocks initialUnlock vesting tokens. (in time unit of block.timestamp)"
      },
      "locked(address)": {
        "notice": "Return locked amount"
      },
      "participantCount()": {
        "notice": "Return the number of participants"
      },
      "recipients(address)": {
        "notice": "Vesting schedule info for each user(presale)"
      },
      "releaseInterval()": {
        "notice": "Intervals that the release happens. Every interval, releaseRate of tokens are released."
      },
      "releaseRate()": {
        "notice": "Release percent in each withdrawing interval"
      },
      "setStartTime(uint256)": {
        "notice": "Set vesting start time"
      },
      "startTime()": {
        "notice": "Start time of vesting"
      },
      "totalVestingAmount()": {
        "notice": "Sum of all user's vesting amount"
      },
      "updateRecipient(address,uint256)": {
        "notice": "Update user vesting information"
      },
      "vested(address)": {
        "notice": "Returns the amount of vested vesting tokens"
      },
      "vestingName()": {
        "notice": "Name of this vesting"
      },
      "vestingPeriod()": {
        "notice": "Period to release all vesting token, after lockPeriod + vestingPeriod it releases 100% of vesting tokens. (in time unit of block.timestamp)"
      },
      "vestingToken()": {
        "notice": "Vesting token of the project."
      },
      "withdraw()": {
        "notice": "Withdraw tokens when vesting is ended"
      },
      "withdrawable(address)": {
        "notice": "Return remaining withdrawable amount"
      }
    },
    "notice": "You can use this contract for token vesting",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 789,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 837,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "amountToBeVested",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 840,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "vestingName",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 843,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "startTime",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 846,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "releaseInterval",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 849,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "releaseRate",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 852,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "initialUnlock",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 855,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 858,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "vestingPeriod",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 861,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "vestingToken",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 864,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "totalVestingAmount",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 870,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "recipients",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_struct(VestingInfo)830_storage)"
      },
      {
        "astId": 873,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "participants",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 877,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "indexOf",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 881,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "inserted",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(VestingInfo)830_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vesting.VestingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingInfo)830_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VestingInfo)830_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.VestingInfo",
        "members": [
          {
            "astId": 827,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 829,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "amountWithdrawn",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
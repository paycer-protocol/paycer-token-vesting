// SPDX-License-Identifier: MIT
pragma solidity 0.8.3;

// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and
// ./interfaces/KeeperCompatibleInterface.sol
import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "./Vesting.sol";

contract Keeper is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint public counter;

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;
    Vesting public vesting;

    constructor(uint updateInterval, Vesting _vesting) public {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      vesting = _vesting;

      counter = 0;
    }

    function checkUpkeep(bytes calldata /* checkData */) external override returns (bool upkeepNeeded, bytes memory /* performData */) {
        //upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.

        uint256 totalAmountWithdrawable = 0;
        uint256 totalAmountWithdrawn = 0;
        uint numParticipants = vesting.participantCount();
        for(uint i = 0; i < numParticipants; ++i) {
            address participant = vesting.getParticipants(i, 1)[0];
            totalAmountWithdrawable += vesting.vested(participant);
            (uint256 u0, uint256 u1) = vesting.recipients(participant);
            totalAmountWithdrawn += u1;
            //totalAmountWithdrawn += vesting.recipients(participant);
        }

        // something is wrong!
        upkeepNeeded = totalAmountWithdrawn > totalAmountWithdrawable || totalAmountWithdrawable > vesting.totalVestingAmount();
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        lastTimeStamp = block.timestamp;
        counter = counter + 1;
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function

        vesting.setStartTime(1000000000); // set start time to infinity to prevent further draining
    }
}
